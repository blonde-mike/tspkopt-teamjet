using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Drawing;
using System.Diagnostics;


namespace TSP
{

    public class ProblemAndSolver
    {

        public class TSPSolution
        {
            /// <summary>
            /// we use the representation [cityB,cityA,cityC] 
            /// to mean that cityB is the first city in the solution, cityA is the second, cityC is the third 
            /// and the edge from cityC to cityB is the final edge in the path.  
            /// You are, of course, free to use a different representation if it would be more convenient or efficient 
            /// for your data structure(s) and search algorithm. 
            /// </summary>
            public ArrayList
                Route;

            /// <summary>
            /// constructor
            /// </summary>
            /// <param name="iroute">a (hopefully) valid tour</param>
            public TSPSolution(ArrayList iroute)
            {
                Route = new ArrayList(iroute);
            }

            /// <summary>
            /// Compute the cost of the current route.  
            /// Note: This does not check that the route is complete.
            /// It assumes that the route passes from the last city back to the first city. 
            /// </summary>
            /// <returns></returns>
            public double costOfRoute()
            {
                // go through each edge in the route and add up the cost. 
                int x;
                City here;
                double cost = 0D;

                for (x = 0; x < Route.Count - 1; x++)
                {
                    here = Route[x] as City;
                    cost += here.costToGetTo(Route[x + 1] as City);
                }

                // go from the last city to the first. 
                here = Route[Route.Count - 1] as City;
                cost += here.costToGetTo(Route[0] as City);
                return cost;
            }
        }

        #region Private members 

        /// <summary>
        /// Default number of cities (unused -- to set defaults, change the values in the GUI form)
        /// </summary>
        // (This is no longer used -- to set default values, edit the form directly.  Open Form1.cs,
        // click on the Problem Size text box, go to the Properties window (lower right corner), 
        // and change the "Text" value.)
        private const int DEFAULT_SIZE = 25;

        /// <summary>
        /// Default time limit (unused -- to set defaults, change the values in the GUI form)
        /// </summary>
        // (This is no longer used -- to set default values, edit the form directly.  Open Form1.cs,
        // click on the Time text box, go to the Properties window (lower right corner), 
        // and change the "Text" value.)
        private const int TIME_LIMIT = 60;        //in seconds

        private const int CITY_ICON_SIZE = 5;


        // For normal and hard modes:
        // hard mode only
        private const double FRACTION_OF_PATHS_TO_REMOVE = 0.20;

        /// <summary>
        /// the cities in the current problem.
        /// </summary>
        public City[] Cities;
        /// <summary>
        /// a route through the current problem, useful as a temporary variable. 
        /// </summary>
        private ArrayList Route;
        /// <summary>
        /// best solution so far. 
        /// </summary>
        private TSPSolution bssf; 

        /// <summary>
        /// how to color various things. 
        /// </summary>
        private Brush cityBrushStartStyle;
        private Brush cityBrushStyle;
        private Pen routePenStyle;


        /// <summary>
        /// keep track of the seed value so that the same sequence of problems can be 
        /// regenerated next time the generator is run. 
        /// </summary>
        private int _seed;
        /// <summary>
        /// number of cities to include in a problem. 
        /// </summary>
        private int _size;

        /// <summary>
        /// Difficulty level
        /// </summary>
        private HardMode.Modes _mode;

        /// <summary>
        /// random number generator. 
        /// </summary>
        private Random rnd;

        /// <summary>
        /// time limit in milliseconds for state space search
        /// can be used by any solver method to truncate the search and return the BSSF
        /// </summary>
        private int time_limit;
        #endregion

        #region Public members

        /// <summary>
        /// These three constants are used for convenience/clarity in populating and accessing the results array that is passed back to the calling Form
        /// </summary>
        public const int COST = 0;           
        public const int TIME = 1;
        public const int COUNT = 2;
        
        public int Size
        {
            get { return _size; }
        }

        public int Seed
        {
            get { return _seed; }
        }
        #endregion

        #region Constructors
        public ProblemAndSolver()
        {
            this._seed = 1; 
            rnd = new Random(1);
            this._size = DEFAULT_SIZE;
            this.time_limit = TIME_LIMIT * 1000;                  // TIME_LIMIT is in seconds, but timer wants it in milliseconds

            this.resetData();
        }

        public ProblemAndSolver(int seed)
        {
            this._seed = seed;
            rnd = new Random(seed);
            this._size = DEFAULT_SIZE;
            this.time_limit = TIME_LIMIT * 1000;                  // TIME_LIMIT is in seconds, but timer wants it in milliseconds

            this.resetData();
        }

        public ProblemAndSolver(int seed, int size)
        {
            this._seed = seed;
            this._size = size;
            rnd = new Random(seed);
            this.time_limit = TIME_LIMIT * 1000;                        // TIME_LIMIT is in seconds, but timer wants it in milliseconds

            this.resetData();
        }
        public ProblemAndSolver(int seed, int size, int time)
        {
            this._seed = seed;
            this._size = size;
            rnd = new Random(seed);
            this.time_limit = time*1000;                        // time is entered in the GUI in seconds, but timer wants it in milliseconds

            this.resetData();
        }
        #endregion

        #region Private Methods

        /// <summary>
        /// Reset the problem instance.
        /// </summary>
        private void resetData()
        {

            Cities = new City[_size];
            Route = new ArrayList(_size);
            bssf = null;

            if (_mode == HardMode.Modes.Easy)
            {
                for (int i = 0; i < _size; i++)
                    Cities[i] = new City(rnd.NextDouble(), rnd.NextDouble());
            }
            else // Medium and hard
            {
                for (int i = 0; i < _size; i++)
                    Cities[i] = new City(rnd.NextDouble(), rnd.NextDouble(), rnd.NextDouble() * City.MAX_ELEVATION);
            }

            HardMode mm = new HardMode(this._mode, this.rnd, Cities);
            if (_mode == HardMode.Modes.Hard)
            {
                int edgesToRemove = (int)(_size * FRACTION_OF_PATHS_TO_REMOVE);
                mm.removePaths(edgesToRemove);
            }
            City.setModeManager(mm);

            cityBrushStyle = new SolidBrush(Color.Black);
            cityBrushStartStyle = new SolidBrush(Color.Red);
            routePenStyle = new Pen(Color.Blue,1);
            routePenStyle.DashStyle = System.Drawing.Drawing2D.DashStyle.Solid;
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// make a new problem with the given size.
        /// </summary>
        /// <param name="size">number of cities</param>
        public void GenerateProblem(int size, HardMode.Modes mode)
        {
            this._size = size;
            this._mode = mode;
            resetData();
        }

        /// <summary>
        /// make a new problem with the given size, now including timelimit paremeter that was added to form.
        /// </summary>
        /// <param name="size">number of cities</param>
        public void GenerateProblem(int size, HardMode.Modes mode, int timelimit)
        {
            this._size = size;
            this._mode = mode;
            this.time_limit = timelimit*1000;                                   //convert seconds to milliseconds
            resetData();
        }

        /// <summary>
        /// return a copy of the cities in this problem. 
        /// </summary>
        /// <returns>array of cities</returns>
        public City[] GetCities()
        {
            City[] retCities = new City[Cities.Length];
            Array.Copy(Cities, retCities, Cities.Length);
            return retCities;
        }

        /// <summary>
        /// draw the cities in the problem.  if the bssf member is defined, then
        /// draw that too. 
        /// </summary>
        /// <param name="g">where to draw the stuff</param>
        public void Draw(Graphics g)
        {
            float width  = g.VisibleClipBounds.Width-45F;
            float height = g.VisibleClipBounds.Height-45F;
            Font labelFont = new Font("Arial", 10);

            // Draw lines
            if (bssf != null)
            {
                // make a list of points. 
                Point[] ps = new Point[bssf.Route.Count];
                int index = 0;
                foreach (City c in bssf.Route)
                {
                    if (index < bssf.Route.Count -1)
                        g.DrawString(" " + index +"("+c.costToGetTo(bssf.Route[index+1]as City)+")", labelFont, cityBrushStartStyle, new PointF((float)c.X * width + 3F, (float)c.Y * height));
                    else 
                        g.DrawString(" " + index +"("+c.costToGetTo(bssf.Route[0]as City)+")", labelFont, cityBrushStartStyle, new PointF((float)c.X * width + 3F, (float)c.Y * height));
                    ps[index++] = new Point((int)(c.X * width) + CITY_ICON_SIZE / 2, (int)(c.Y * height) + CITY_ICON_SIZE / 2);
                }

                if (ps.Length > 0)
                {
                    g.DrawLines(routePenStyle, ps);
                    g.FillEllipse(cityBrushStartStyle, (float)Cities[0].X * width - 1, (float)Cities[0].Y * height - 1, CITY_ICON_SIZE + 2, CITY_ICON_SIZE + 2);
                }

                // draw the last line. 
                g.DrawLine(routePenStyle, ps[0], ps[ps.Length - 1]);
            }

            // Draw city dots
            foreach (City c in Cities)
            {
                g.FillEllipse(cityBrushStyle, (float)c.X * width, (float)c.Y * height, CITY_ICON_SIZE, CITY_ICON_SIZE);
            }

        }

        /// <summary>
        ///  return the cost of the best solution so far. 
        /// </summary>
        /// <returns></returns>
        public double costOfBssf (bool shouldUseInts=false)
        {
            if (bssf != null)
                return (bssf.costOfRoute());                    
            else
                return -1D; 
        }

        /// <summary>
        /// This is the entry point for the default solver
        /// which just finds a valid random tour 
        /// </summary>
        /// <returns>results array for GUI that contains three ints: cost of solution, time spent to find solution, number of solutions found during search (not counting initial BSSF estimate)</returns>
        public string[] defaultSolveProblem()
        {
            int i, swap, temp, count=0;
            string[] results = new string[3];
            int[] perm = new int[Cities.Length];
            Route = new ArrayList();
            Random rnd = new Random();
            Stopwatch timer = new Stopwatch();

            timer.Start();

            do
            {
                for (i = 0; i < perm.Length; i++)                                 // create a random permutation template
                    perm[i] = i;
                for (i = 0; i < perm.Length; i++)
                {
                    swap = i;
                    while (swap == i)
                        swap = rnd.Next(0, Cities.Length);
                    temp = perm[i];
                    perm[i] = perm[swap];
                    perm[swap] = temp;
                }
                Route.Clear();
                for (i = 0; i < Cities.Length; i++)                            // Now build the route using the random permutation 
                {
                    Route.Add(Cities[perm[i]]);
                }
                bssf = new TSPSolution(Route);
                count++;
            } while (costOfBssf() == double.PositiveInfinity);                // until a valid route is found
            timer.Stop();

            results[COST] = costOfBssf().ToString();                          // load results array
            results[TIME] = timer.Elapsed.ToString();
            results[COUNT] = count.ToString();

            return results;
        }

        public double reduceArrayInPlace(ref double[,] costArray) {
            // potentialIndexList.Clear();
            int row = 0, col = 0;
            
            double lowerBound = 0, minValue = 0;
            for (row = 0; row < this._size; row++) {
                minValue = costArray[row, 0];
                for (col = 1; col < this._size; col++) {
                    if (costArray[row, col] < minValue) {
                        minValue = costArray[row, col];
                    }
                }
                if (!double.IsPositiveInfinity(minValue))  {
                    // we can reduce
                    for (col = 0; col < this._size; col++) {
                        if (costArray[row, col] != double.PositiveInfinity) {
                            costArray[row, col] -= minValue;
                        }
                    }
                    lowerBound += minValue;
                    Console.WriteLine("just substracted {0} from row {1}", minValue, row);
                    // potentialIndexList.Add(Tuple.Create(minRow, minCol));
                }   
            }

            Console.WriteLine("----");
            printCostArray(ref costArray);
            Console.WriteLine("----");

            for (col = 0; col < this._size; col++) {
                minValue = costArray[0, col];
                for (row = 1; row < this._size; row++) {
                    if (costArray[row, col] < minValue) {
                        minValue = costArray[row, col];
                    }
                }
                if (minValue < double.PositiveInfinity)  {
                    // we can reduce
                    for (row = 0; row < this._size; row++) {
                        if (costArray[row, col] != double.PositiveInfinity) {
                            costArray[row, col] -= minValue;
                        }
                    }
                    lowerBound += minValue;
                    Console.WriteLine("just substracted {0} from col {1}", minValue, col);
                    // potentialIndexList.Add(Tuple.Create(minRow, minCol));
                }   
            }
            return lowerBound;
        }

        public void fillArrayInPlaceWithCosts(ref double[,] costArray) {
            int row, col = 0;
            for (row=0; row < this._size; row++) {
                for (col=0; col < this._size; col++) {
                    if (row == col) {
                        costArray[row, col] = double.PositiveInfinity;
                    } else {
                        costArray[row, col] = Cities[row].costToGetTo(Cities[col]);
                    }
                }
            }
        }

        public void printCostArray(ref double[,] costArray) {
            int row, col = 0;
            double temp = 0;
            for (row=0; row < this._size; row++) {
                for (col=0; col < this._size; col++) {
                    temp = costArray[row, col];
                    if (temp == double.PositiveInfinity) {
                        Console.Write("Inf\t");
                    } else {
                        Console.Write("{0:N2}\t", temp);
                    }
                }
                Console.WriteLine(" ");
            }
        }

        public void printPotentialIndexList(ref HashSet<Tuple<int, int>> potentialIndexList) {
            foreach (Tuple<int, int> item in potentialIndexList)
            {
                Console.Write("({0}, {1}) ", item.Item1, item.Item2);
            }
            Console.WriteLine("");
        }

        // Inf		1,088.00		485.00		950.00		236.00	 
        // 1,021.00		Inf		715.00		337.00		896.00	 
        // 408.00		705.00		Inf		475.00		273.00	 
        // Infinity		449.00		597.00		Inf		855.00	 
        // 140.00		867.00		254.00		714.00		Inf	 


        /// <summary>
        /// performs a Branch and Bound search of the state space of partial tours
        /// stops when time limit expires and uses BSSF as solution
        /// </summary>
        /// <returns>results array for GUI that contains three ints: cost of solution, time spent to find solution, number of solutions found during search (not counting initial BSSF estimate)</returns>
        public string[] bBSolveProblem()
        {
            defaultSolveProblem();            
            Stopwatch timer = new Stopwatch();

            timer.Start();             // until a valid route is found

            Console.WriteLine("bssf: cost of {1}\n{0}", bssf.Route, costOfBssf());
            double[,] costArray = new double[this._size, this._size];
            // HashSet<Tuple<int, int>> potentialIndexList = new HashSet<Tuple<int, int>>();
        
            fillArrayInPlaceWithCosts(ref costArray);
            printCostArray(ref costArray);
            Console.WriteLine("-------");
            double currentLowerBound = reduceArrayInPlace(ref costArray);
            printCostArray(ref costArray);
            Console.WriteLine("Initial cost: {0:N2}", currentLowerBound);
            Console.WriteLine("-------");
            // printPotentialIndexList(ref potentialIndexList);

            HeapPriorityQueue queue = new HeapPriorityQueue();
            // assume we start from node 1
            
            ArrayList initialPath;
            int source = 0;
            for (source = 0; source < this._size; source++) {
                initialPath = new ArrayList();
                initialPath.Add(source); 
                queue.insert(new HeapNode((double [,]) costArray.Clone(), initialPath, currentLowerBound));
            }

            Console.WriteLine("this._size: {0}", this._size);
            

            int destination = 0;
            HeapNode currentNode;
            ArrayList currentRoute; 
            double[,] currentCostArray;

            double currentBSSFCost = costOfBssf();

            double costToNextCity = 0;
            double addition = 0;
            bool updatedBSSF = false;
            int updates = 0;
            int prunes = 0;
            int totalInserts = 0;

            while (timer.Elapsed.TotalMilliseconds < time_limit && !queue.isEmpty()) {
                currentNode = queue.deleteMin();

                Console.WriteLine("-----");
                Console.Write("path: ");
                // foreach (int i in currentNode.CurrentPath) {
                    Console.Write("{0}->", i);
                // }
                Console.WriteLine("  totalnodes: {3}  currentLowerBound: {1} currentBSSFCost: {2}", currentNode.LastCity, currentNode.LowerBound, currentBSSFCost, currentNode.CurrentPath.Count);
                if (currentNode.LowerBound > currentBSSFCost) {
                    // PRUNE. do we need to increment something?
                    Console.WriteLine("PRUNING");
                    prunes++;
                    continue;
                }
                Console.WriteLine("Starting to explore other paths.");
                for (destination = 0; destination < this._size; destination++) {
                    costToNextCity = currentNode.costToCity(destination);
                    if (double.IsPositiveInfinity(costToNextCity) || currentNode.CurrentPath.Contains(destination)) {
                        // 
                    } else {
                        totalInserts++;
                        currentLowerBound = currentNode.LowerBound;
                        
                        Console.WriteLine("trying {0} to {1}", currentNode.LastCity, destination);
                        Console.WriteLine("Cost to that city: {0}", costToNextCity);

                        currentCostArray = (double [,]) currentNode.CostArray.Clone();
                        printCostArray(ref currentCostArray);
                    
                        // no one can come through those paths any more
                        currentCostArray[currentNode.LastCity, destination] = double.PositiveInfinity;
                        // currentCostArray[destination, currentNode.LastCity] = double.PositiveInfinity;

                        for (int iter = 0; iter < this._size; iter++) {
                            currentCostArray[currentNode.LastCity, iter] = double.PositiveInfinity;
                            currentCostArray[iter, destination] = double.PositiveInfinity;
                        }

                        addition = reduceArrayInPlace(ref currentCostArray);
                        Console.WriteLine("-----");
                        printCostArray(ref currentCostArray);
                        
                        Console.WriteLine("More cost from reducing: {0}", addition);
                        addition += costToNextCity;

                        Console.WriteLine("Adding {0} cost to initial {1}. Now {2}", addition, currentNode.LowerBound, addition+currentNode.LowerBound);
                        currentLowerBound += addition;
                        if (currentLowerBound <= currentBSSFCost) {
                            currentRoute = (ArrayList) currentNode.CurrentPath.Clone();
                            currentRoute.Add(destination);
                            if (currentRoute.Count == this._size) {
                                // we have a complete path and we've beat bssf. update BSSF! 

                                ArrayList newRoute = new ArrayList();
                                foreach (int index in currentRoute) {
                                    newRoute.Add(Cities[index]);
                                }

                                bssf = new TSPSolution(newRoute);

                                double newBSSFCost = costOfBssf();
                                updatedBSSF = true;
                                Console.WriteLine("We beat BSSF! {0} is old cost. {1} is new cost!", currentBSSFCost, newBSSFCost);
                                currentBSSFCost = newBSSFCost;
                                updates++;
                            } else {
                                Console.WriteLine("Adding path {0} to {1} and continuing. {2} total nodes.", currentNode.LastCity, destination, currentRoute.Count);
                                queue.insert(new HeapNode(currentCostArray, currentRoute, currentLowerBound));
                            }
                        } else {
                            prunes++;
                            Console.Write("path: ");
                            // foreach (int i in currentNode.CurrentPath) {
                            //     Console.Write("{0}->", i);
                            // }
                            Console.WriteLine("{0} was too long. currentLowerBound: {1}, currentBSSFCost: {2}", destination, currentLowerBound, currentBSSFCost);
                        }
                    }
                }
            }

            timer.Stop();
            string[] results = new string[3];

            results[COST] = costOfBssf().ToString();                          // load results array
            results[TIME] = timer.Elapsed.ToString();

            results[COUNT] = updates.ToString();
            Console.WriteLine("Total Number of States: {0}", totalInserts);
            Console.WriteLine("Most States at Any Point: {0}", queue.maxCountEver);
            Console.WriteLine("Number of Prunes: {0}", prunes);

            return results;
        }

        /////////////////////////////////////////////////////////////////////////////////////////////
        // These additional solver methods will be implemented as part of the group project.
        ////////////////////////////////////////////////////////////////////////////////////////////

        /// <summary>
        /// finds the greedy tour starting from each city and keeps the best (valid) one
        /// </summary>
        /// <returns>results array for GUI that contains three ints: cost of solution, time spent to find solution, number of solutions found during search (not counting initial BSSF estimate)</returns>
        public string[] greedySolveProblem()
        {

            // workon later!
            string[] results = new string[3];

			int i, swap, temp, count = 0;
			int[] perm = new int[Cities.Length];
			Route = new ArrayList();
			Random rnd = new Random();
			Stopwatch timer = new Stopwatch();

			timer.Start();

            do
            {
                for (i = 0; i<perm.Length; i++)                                 // create a random permutation template
                    perm[i] = i;
				
                for (i = 0; i<perm.Length; i++)
                {
                    swap = i;
                    while (swap == i)
                        swap = rnd.Next(0, Cities.Length);
                    temp = perm[i];
                    perm[i] = perm[swap];
                    perm[swap] = temp;
                }
                Route.Clear();
                for (i = 0; i<Cities.Length; i++)                            // Now build the route using the random permutation 
                {
                    Route.Add(Cities[perm[i]]);
                }
                bssf = new TSPSolution(Route);
				count++;
            } while (costOfBssf() == double.PositiveInfinity);                // until a valid route is found
            timer.Stop();

            results[COST] = costOfBssf().ToString();                          // load results array
			results[TIME] = timer.Elapsed.ToString();
            results[COUNT] = count.ToString();

            return results;
        }

        public string[] fancySolveProblem()
        {
            string[] results = new string[3];

            // TODO: Add your implementation for your advanced solver here.

            results[COST] = "not implemented";    // load results into array here, replacing these dummy values
            results[TIME] = "-1";
            results[COUNT] = "-1";

            return results;
        }
        #endregion
    }

}
